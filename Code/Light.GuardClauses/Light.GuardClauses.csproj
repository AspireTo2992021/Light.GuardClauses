<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard1.0</TargetFramework>
    <Description>A lightweight .NET library for expressive Guard Clauses.</Description>
    <Version>2.0.0</Version>
    <Authors>Kenny Pflug</Authors>
    <Company>Kenny Pflug</Company>
    <Copyright>Copyright © Kenny Pflug</Copyright>
    <PackageIconUrl>https://raw.githubusercontent.com/feO2x/Light.GuardClauses/master/Images/light_logo.png</PackageIconUrl>
    <PackageProjectUrl>https://github.com/feO2x/Light.GuardClauses</PackageProjectUrl>
    <PackageLicenseUrl>https://raw.githubusercontent.com/feO2x/Light.GuardClauses/master/LICENSE</PackageLicenseUrl>
    <RepositoryType>Git</RepositoryType>
    <PackageTags>Assertions Preconditions GuardClauses DesignByContract DbC</PackageTags>
    <PackageReleaseNotes>Light.GuardClauses is now a .NET Standard 1.0 library.

Breaking Changes:
  - no more conditional compilation: all assertion methods now return the value that they check, so that they can be easily chained or set on a field. COMPILE_ASSERTIONS is gone.
  - Equality now only depends on IEqualityComparer&lt;T&gt;. There are no assertions that directly address IEquatable&lt;T&gt; or struct comparison. Just use MustBe or MustNotBe and optionally pass in an IEqualityComparer&lt;T&gt; instance. This also affects most EnumerableAssertions.

Added features:
  - new assertions for URIs: MustHaveOneSchemeOf, MustBeHttpUrl, MustBeHttpsUrl, and MustBeHttpOrHttpsUrl
  - AsReadOnlyList takes an IEnumerable&lt;T&gt; and tries to cast it to an IReadOnlyList&lt;T&gt; instance. If that is not possible, a new List&lt;T&gt; instance with the items of the enumerable will be returned.
  
</PackageReleaseNotes>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>bin\Release\netstandard1.0\Light.GuardClauses.xml</DocumentationFile>
  </PropertyGroup>

</Project>
